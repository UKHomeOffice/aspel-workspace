#!/usr/bin/env node

try {
  // eslint-disable-next-line implicit-dependencies/no-implicit
  require('dotenv').config();
} catch (e) {}

const { get, map } = require('lodash');
const minimist = require('minimist');
const { green } = require('chalk');
const settings = require('../config');
const db = require('../lib/db');
const { createESClient } = require('../lib/elasticsearch');

const indexers = require('../lib/indexers');

const start = process.hrtime();
const args = minimist(process.argv.slice(2));
const model = args._[0] || 'all';


Promise.resolve()
  .then(() => createESClient(settings.es))
  .then(esClient => {
    const index = key => {
      console.log(`Indexing ${green(key)}`);
      const indexer = indexers[key];
      if (!indexer) {
        throw new Error(`No indexer available for ${green(model)}.`);
      }
      return Promise.resolve()
        .then(() => {
          if (args.reset) {
            console.log(`Resetting index ${green(key)}`);
            return esClient.indices.delete({ index: key })
              .catch(e => {
                if (get(e, 'body.error.type') === 'index_not_found_exception') {
                  return;
                }
                throw e;
              });
          }
        })
        .then(() => {
          return indexer(db, esClient);
        })
        .then(() => {
          console.log(`Completed index ${green(key)}`);
          console.log();
        });
    };

    if (model === 'all') {
      return Object.keys(indexers).reduce((p, key) => p.then(() => index(key)), Promise.resolve());
    }
    return index(model);
  })

  .then(() => {
    console.log('Done!');

    const end = process.hrtime(start);
    console.log(`\nIndexing took: ${(end[0] * 1000) + Math.round(end[1] / 1e6)}ms`);

    db.destroy();
    process.exit(0);
  })

  .catch(err => {
    const error = get(err, 'meta.body.error');
    if (error) {
      console.error(error);
    } else {
      console.log(err);
    }
    process.exit(1);
  });
