#!/usr/bin/env node

try {
  // eslint-disable-next-line implicit-dependencies/no-implicit
  require('dotenv').config();
} catch (e) {}

const { get, map } = require('lodash');
const minimist = require('minimist');
const { green } = require('chalk');
const settings = require('../config');
const db = require('../lib/db');
const { createESClient } = require('../lib/elasticsearch');

const indexers = require('../lib/indexers');

const start = process.hrtime();
const args = minimist(process.argv.slice(2));
const model = args._[0] || 'all';

console.log(`Attempting to index "${green(model)}"\n`);

Promise.resolve()
  .then(() => createESClient(settings.es))
  .then(esClient => {
    if (model === 'all') {
      return Promise.all(map(indexers, indexer => indexer(db, esClient)));
    }

    if (indexers[model]) {
      return indexers[model](db, esClient);
    }

    throw new Error(`No indexer available for ${green(model)}. If you want to index everything, pass 'all' as the first argument`);
  })

  .then(() => {
    console.log('Done!');

    const end = process.hrtime(start);
    console.log(`\nIndexing took: ${(end[0] * 1000) + Math.round(end[1] / 1e6)}ms`);

    db.destroy();
    process.exit(0);
  })

  .catch(err => {
    const error = get(err, 'meta.body.error');
    if (error) {
      console.error(error);
    } else {
      console.log(err);
    }
    process.exit(1);
  });
