---

kind: pipeline
name: deployset
type: kubernetes

steps:
  - name: install
    image: node:22.14.0
    commands:
      - npm ci --workspaces=false
  - name: deployset
    image: node:22.14.0
    environment:
      DRONE_SERVER: ${DRONE_SYSTEM_PROTO}://${DRONE_SYSTEM_HOST}
      DRONE_TOKEN:
        from_secret: drone_token
      DRONE_REPO_OWNER: ${DRONE_REPO_OWNER}
      DRONE_REPO_NAME: ${DRONE_REPO_NAME}
      DRONE_BUILD_NUMBER: ${DRONE_BUILD_NUMBER}
      BUILD_STAGES: asl asl-attachments asl-data-exports asl-emailer asl-internal-api asl-internal-ui asl-metrics asl-notifications asl-permissions asl-public-api asl-resolver asl-schema asl-search asl-workflow
      SKIP_STATUS: 78
    commands:
      - node ./ci/deployset.js $BUILD_STAGES > .deploy-set
  - name: manifest
    image: node:22.14.0
    environment:
      GITHUB_TOKEN:
        from_secret: github_access_token
      GITHUB_REPO_OWNER: ukhomeoffice
      GITHUB_REPO_NAME: asl-deployments
      GITHUB_MANIFEST_PATH: versions.yml
      SOURCE_COMMIT: "${DRONE_COMMIT}"
    commands:
      # Drone inexplicably creates yaml parse errors when reassigning this through the `envionment` block
      - export SOURCE_COMMIT_MESSAGE=$DRONE_COMMIT_MESSAGE
      - node ./ci/manifest.js $(cat .deploy-set)

trigger:
  event:
    - push
  branch:
    - main

---

kind: pipeline
name: asl
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl --audit-level=high --omit=dev
  - name: compile
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run build --workspace asl --production
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl
      ALLOW_CVE_LIST_FILE: packages/asl/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl quay.io/ukhomeofficedigital/asl:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
  - name: docker
    image: docker:dind
    environment:
      DOCKER_TLS_CERTDIR: ""

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-attachments
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-attachments
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-attachments
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-attachments
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-attachments --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-attachments/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-attachments .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-attachments
      ALLOW_CVE_LIST_FILE: packages/asl-attachments/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-attachments quay.io/ukhomeofficedigital/asl-attachments:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-attachments:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""
- name: anchore-submission-server
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  pull: always
  commands:
    - /run.sh server

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-data-exports
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-data-exports
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: asl-test
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-data-exports
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-data-exports --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-data-exports/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-data-exports .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-data-exports
      ALLOW_CVE_LIST_FILE: packages/asl-data-exports/cve-exceptions.txt
      TIMEOUT: 20m
      EXCLUDE_PATHS: "**/*.js.map"
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-data-exports quay.io/ukhomeofficedigital/asl-data-exports:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-data-exports:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
  - name: docker
    image: docker:dind
    environment:
      DOCKER_TLS_CERTDIR: ""
  - name: postgres
    image: postgres
    environment:
      POSTGRES_USER: asl-test
      POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-emailer
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-emailer
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-emailer
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-emailer
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-emailer --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-emailer/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-emailer .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-emailer
      ALLOW_CVE_LIST_FILE: packages/asl-emailer/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-emailer quay.io/ukhomeofficedigital/asl-emailer:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-emailer:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-internal-api
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-internal-api
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-internal-api
  - name: wait postgres
    image: postgres
    environment:
      PGPASSWORD: test-password
    commands:
      - until psql -U asl-test -d asl-test -h postgres -c "SELECT 1;" >/dev/null 2>&1; do sleep 1; done
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: asl-test
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-internal-api
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-internal-api --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-internal-api/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-internal-api .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-internal-api
      ALLOW_CVE_LIST_FILE: packages/asl-internal-api/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-internal-api quay.io/ukhomeofficedigital/asl-internal-api:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-internal-api:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""
- name: postgres
  image: postgres
  environment:
    POSTGRES_USER: asl-test
    POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-internal-ui
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-internal-ui
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-internal-ui
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-internal-ui
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-internal-ui --audit-level=high --omit=dev
  - name: compile
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run build --workspace asl-internal-ui --production
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-internal-ui/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-internal-ui .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-internal-ui
      ALLOW_CVE_LIST_FILE: packages/asl-internal-ui/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-internal-ui quay.io/ukhomeofficedigital/asl-internal-ui:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-internal-ui:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-metrics
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-metrics
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-metrics
  - name: database setup
    image: postgres
    environment:
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: test-password
    commands:
      - psql -c 'CREATE DATABASE "asl-test"'
      - psql -c 'CREATE DATABASE "taskflow-test"'
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: test-password
      WORKFLOW_DATABASE_NAME: taskflow-test
      WORKFLOW_DATABASE_HOST: postgres
      WORKFLOW_DATABASE_USERNAME: postgres
      WORKFLOW_DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-metrics
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-metrics --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-metrics/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-metrics .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-metrics
      ALLOW_CVE_LIST_FILE: packages/asl-metrics/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-metrics quay.io/ukhomeofficedigital/asl-metrics:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-metrics:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""
- name: postgres
  image: postgres
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-notifications
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-notifications
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-notifications
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: asl-test
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-notifications
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-notifications --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-notifications/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-notifications .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-notifications
      ALLOW_CVE_LIST_FILE: packages/asl-notifications/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-notifications quay.io/ukhomeofficedigital/asl-notifications:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-notifications:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""
- name: postgres
  image: postgres
  environment:
    POSTGRES_USER: asl-test
    POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-pages
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-pages
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace @asl/pages
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace @asl/pages
  - name: build
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run build --workspace @asl/pages

---

kind: pipeline
name: asl-permissions
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-permissions
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-permissions
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: asl-test
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-permissions
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-permissions --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-permissions/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-permissions .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-permissions
      ALLOW_CVE_LIST_FILE: packages/asl-permissions/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-permissions quay.io/ukhomeofficedigital/asl-permissions:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-permissions:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
  - name: docker
    image: docker:dind
    environment:
      DOCKER_TLS_CERTDIR: ""
  - name: postgres
    image: postgres
    environment:
      POSTGRES_USER: asl-test
      POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-projects
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-projects
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace @asl/projects
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test:unit --workspace @asl/projects

---

kind: pipeline
name: asl-public-api
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-public-api
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-public-api
  - name: wait postgres
    image: postgres
    environment:
      PGPASSWORD: test-password
    commands:
      - until psql -U asl-test -d asl-test -h postgres -c "SELECT 1;" >/dev/null 2>&1; do sleep 1; done
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: asl-test
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-public-api
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-public-api --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-public-api/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-public-api .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-public-api
      ALLOW_CVE_LIST_FILE: packages/asl-public-api/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-public-api quay.io/ukhomeofficedigital/asl-public-api:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-public-api:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""
- name: postgres
  image: postgres
  environment:
    POSTGRES_USER: asl-test
    POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-resolver
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-resolver
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-resolver
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: asl-test
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-resolver
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-resolver --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-resolver/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-resolver .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-resolver
      ALLOW_CVE_LIST_FILE: packages/asl-resolver/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-resolver quay.io/ukhomeofficedigital/asl-resolver:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-resolver:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""
- name: postgres
  image: postgres
  environment:
    POSTGRES_USER: asl-test
    POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-schema
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-schema
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace @asl/schema
  - name: test
    image: node:22.14.0
    environment:
      DATABASE_NAME: asl-test
      DATABASE_HOST: postgres
      DATABASE_USERNAME: asl-test
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm test --workspace @asl/schema
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=@asl/schema --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-schema/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-schema .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-schema
      ALLOW_CVE_LIST_FILE: packages/asl-schema/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-schema quay.io/ukhomeofficedigital/asl-schema:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-schema:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
  - name: docker
    image: docker:dind
    environment:
      DOCKER_TLS_CERTDIR: ""
  - name: postgres
    image: postgres
    environment:
      POSTGRES_USER: asl-test
      POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-search
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-search
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-search
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace asl-search
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-search --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-search/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-search .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-search
      ALLOW_CVE_LIST_FILE: packages/asl-search/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-search quay.io/ukhomeofficedigital/asl-search:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-search:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
  - name: docker
    image: docker:dind
    environment:
      DOCKER_TLS_CERTDIR: ""

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-service
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-service
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace @asl/service
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run test --workspace @asl/service
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=@asl/service --audit-level=high --omit=dev

---

kind: pipeline
name: asl-taskflow
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-taskflow
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace @ukhomeoffice/asl-taskflow
  - name: database setup
    image: postgres
    environment:
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: test-password
    commands:
      - psql -c 'CREATE DATABASE "taskflow-test"'
  - name: test
    image: node:22.14.0
    commands:
      - npm run test --workspace @ukhomeoffice/asl-taskflow
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=@ukhomeoffice/asl-taskflow --audit-level=high --omit=dev

services:
  - name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request

---

kind: pipeline
name: asl-toolbox
type: kubernetes

platform:
  os: linux
  arch: amd64

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-toolbox
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
    when:
      event:
        exclude:
          - tag
  - name: ci
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-toolbox
  - name: test
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DATABASE_USERNAME: asl-test
    commands:
      - cp packages/asl-toolbox/.env.test packages/asl-toolbox/.env
      - npm run test --workspace asl-toolbox
  - name: lint
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm run lint --workspace asl-toolbox
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-toolbox --audit-level=high --omit=dev
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-toolbox --omit=dev
  - name: build
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      # wait for docker service to be up before running docker build
      - n=0; while [ "$n" -lt 60 ] && [[ ! $(docker stats --no-stream) ]]; do n=$(( n + 1 )); sleep 1; done
      - rm .dockerignore
      - docker build -f ./packages/asl-toolbox/Dockerfile -t asl-toolbox . --no-cache
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-toolbox
      ALLOW_CVE_LIST_FILE: packages/asl-toolbox/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push latest
    image: plugins/ecr
    environment:
      AWS_REGION: eu-west-2
    settings:
      access_key:
        from_secret: toolbox_access_id
      secret_key:
        from_secret: toolbox_access_key
      dockerfile: packages/asl-toolbox/Dockerfile
      repo: asl/toolbox
      registry: 340268328991.dkr.ecr.eu-west-2.amazonaws.com
      tags:
        - latest
        - ${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main
  - name: docker tag
    image: plugins/ecr
    environment:
      AWS_REGION: eu-west-2
    settings:
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      dockerfile: packages/asl-toolbox/Dockerfile
      repo: asl/toolbox
      registry: 340268328991.dkr.ecr.eu-west-2.amazonaws.com
      tags:
        - ${DRONE_TAG}
    when:
      ref:
        - refs/tags/asl-toolbox/*

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

  - name: postgres
    image: postgres:14.13-bullseye
    environment:
      POSTGRES_USER: asl-test
      POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request
    - tag

---

kind: pipeline
name: asl-workflow
type: kubernetes

clone:
  disable: true

steps:
  - name: clone
    image: node:22.14.0
    commands:
      - git clone $DRONE_REMOTE_URL .
  - name: changeset
    image: node:22.14.0
    environment:
      TARGET_BRANCH: "${DRONE_TARGET_BRANCH}"
      SOURCE_COMMIT: "${DRONE_COMMIT}"
      BUILD_EVENT: "${DRONE_BUILD_EVENT}"
      SKIP_STATUS: 78
      MODULES: packages/asl-workflow
    commands:
      - git config advice.detachedHead false
      - git checkout $DRONE_COMMIT
      - node ./ci/changeset.js --modules $MODULES
      - git checkout $DRONE_TARGET_BRANCH
      - git merge $DRONE_COMMIT
      - echo "$(node ./ci/modulepaths.js $MODULES)" > .module-paths
  - name: install
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm ci --workspace asl-workflow
  - name: wait postgres
    image: postgres
    environment:
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: test-password
    commands:
      - until psql -c "SELECT 1;" >/dev/null 2>&1; do sleep 1; done
  - name: database setup
    image: postgres
    environment:
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: test-password
    commands:
      - psql -c 'CREATE DATABASE "asl-test"'
      - psql -c 'CREATE DATABASE "taskflow-test"'
  - name: test
    image: node:22.14.0
    environment:
      ASL_DATABASE_HOST: postgres
      ASL_DATABASE_NAME: asl-test
      ASL_DATABASE_USERNAME: postgres
      ASL_DATABASE_PASSWORD: test-password
      DATABASE_HOST: postgres
      DATABASE_NAME: taskflow-test
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: test-password
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm test --workspace asl-workflow
  - name: audit
    image: node:22.14.0
    environment:
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - npm audit --workspace=asl-workflow --audit-level=high --omit=dev
  - name: docker build
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_BUILDKIT: 1
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
    commands:
      - docker build -f ./packages/asl-workflow/Dockerfile --build-arg MODULE_PATHS="$(cat .module-paths)" --secret id=token,env=ART_AUTH_TOKEN --secret id=github_token,env=GITHUB_AUTH_TOKEN -t asl-workflow .
  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: asl-workflow
      ALLOW_CVE_LIST_FILE: packages/asl-workflow/cve-exceptions.txt
      TIMEOUT: 10m
  - name: docker push
    image: docker:dind
    environment:
      DOCKER_HOST: tcp://docker:2375
      ART_AUTH_TOKEN:
        from_secret: art_auth_token
      GITHUB_AUTH_TOKEN:
        from_secret: github_token
      DOCKER_PASSWORD:
        from_secret: quay_password
    commands:
      - docker login -u="ukhomeofficedigital+asl" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag asl-workflow quay.io/ukhomeofficedigital/asl-workflow:$${DRONE_COMMIT_SHA}
      - docker push quay.io/ukhomeofficedigital/asl-workflow:$${DRONE_COMMIT_SHA}
    when:
      event:
        - push
      branch:
        - main

services:
- name: docker
  image: docker:dind
  environment:
    DOCKER_TLS_CERTDIR: ""
- name: postgres
  image: postgres
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test-password

trigger:
  event:
    - push
    - pull_request
